;   新着順で無限スクロールを実装しようとしていたやつのメモ(page.tsxの方)
;   const fetchPosts = useCallback(async () => {
;     // すでに実行中の場合はリターン
;     if (loading) return;
;     setLoading(true);
;     try {
;       console.log("データを取得: 最後のID", lastFetchedId);
;       // postsを取得するAPIをID降順で3件取得
;       const response = await fetch(
;         `/api/new_arrival_order?lastFetchedId=${lastFetchedId}`
;       );
;       if (!response.ok) {
;         throw new Error(`Error! status: ${response.status}`);
;       }

;       console.log("レスポンスにデータを入れる前だよ。");
;       // データを入れる
;       const data = await response.json();
;       // idだけ抽出
;       const postIds = data.map((post) => post.id);
;       // 以前のデータも残しておく
;       setSearchedPosts((prevPosts) => [...prevPosts, ...postIds]);
;       console.log("searchedPostsの配列が更新されました");
;       console.log(searchedPosts); // デバッグ用に配列の内容を出力

;       // 新しいデータがある場合、最後の投稿の ID を更新
;       if (data.length > 0) {
;         const lastPostId = data[data.length - 1].id;
;         setLastFetchedId(lastPostId);
;       }
;     } catch (error) {
;       console.error("Failed to fetch posts", error);
;     } finally {
;       setLoading(false);
;     }
;   }, [lastFetchedId, searchedPosts, loading]);

;   // 初回データ取得
;   useEffect(() => {
;     fetchPosts();
;   }, [fetchPosts]);

;   // Intersection Observerを使ってスクロールを検知
;   useEffect(() => {
;     const observer = new IntersectionObserver((entries) => {
;       if (entries[0].isIntersecting && !loading) {
;         fetchPosts(); // データを再度取得
;       }
;     });

;     const currentLoaderRef = loaderRef.current; // 現在のローダーの参照を保持
;     if (currentLoaderRef) {
;       observer.observe(currentLoaderRef); // ローダー要素を監視
;     }

;     return () => {
;       if (currentLoaderRef) {
;         observer.unobserve(currentLoaderRef); // クリーンアップ
;       }
;       observer.disconnect(); // オブザーバーを解放
;     };
;   }, [loading, fetchPosts]); // loadingとfetchPostsを依存配列に追加

;   const elementRefs = useRef<RefObject<HTMLDivElement>[]>(
;     searchedPosts.map(() => React.createRef<HTMLDivElement>())
;   );


;   新着順無限スクロール　エンドポイントの方
; import { supabase } from "@/lib/supabaseClient";

; // GETメソッド専用の関数
; export async function GET(request) {
;   console.log("リクエストを受信しました"); // このログが表示されるべきです

;   // クエリパラメータを取得
;   const url = new URL(request.url);
;   const lastFetchedId = url.searchParams.get("lastFetchedId");

;   let query;
;   if (lastFetchedId === null || lastFetchedId === "null") {
;     // lastFetchedIdがnullの場合は、最新の3件を取得
;     query = supabase
;       .from("posts")
;       .select("id")
;       .order("id", { ascending: false })
;       .limit(3);
;   } else {
;     // lastFetchedIdが指定されている場合は、それより小さいIDを取得
;     query = supabase
;       .from("posts")
;       .select("id")
;       .lt("id", lastFetchedId)
;       .order("id", { ascending: false })
;       .limit(3);
;   }

;   const { data, error } = await query;

;   if (error) {
;     console.error("Error fetching posts:", error);
;     return new Response(JSON.stringify({ error: error.message }), {
;       status: 500,
;     });
;   }

;   return new Response(JSON.stringify(data), { status: 200 }); // データをそのまま返す
; }
